vim.cmd("set termguicolors")
vim.g.mapleader = ' '

local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
    vim.fn.system({
        "git",
        "clone",
        "--filter=blob:none",
        "https://github.com/folke/lazy.nvim.git",
        "--branch=stable", -- latest stable release
        lazypath,
    })
end
vim.opt.rtp:prepend(lazypath)

require('lazy').setup({
    -- Nececities
    {
        'mbbill/undotree',
        config = function()
            vim.keymap.set('n', '<leader>u', vim.cmd.UndotreeToggle)
        end
    },
    { 'ggandor/leap.nvim',          config = function() require('leap').add_default_mappings() end },
    {
        'nvim-treesitter/nvim-treesitter',
        config = function()
            vim.cmd('TSUpdate'); require('nvim-treesitter.configs').setup({
                ensure_installed = { 'lua', 'vim', 'typescript', 'javascript', 'css', 'html' },
                auto_install = true,

                highlight = { enable = true }
            })
        end
    },
    { 'nvim-tree/nvim-web-devicons' },
    { 'olimorris/onedarkpro.nvim' },
    {
        'nvim-telescope/telescope.nvim',
        dependencies = { 'nvim-lua/plenary.nvim', 'BurntSushi/ripgrep' },
        config = function()
            local builtin = require("telescope.builtin")
            vim.keymap.set('n', '<leader>ff', builtin.find_files)
            vim.keymap.set('n', '<leader>bb', builtin.buffers)                                     -- bb = browser buffers
            vim.keymap.set('n', '<leader>fs',
                function() builtin.grep_string({ search = vim.fn.input("Search string > ") }) end) -- fs = file search
        end
    },
    {
        'nvim-lualine/lualine.nvim',
        config = function()
            require("lualine").setup({
                options = {
                    theme = "onedark",
                    component_separators = { left = '|', right = '|' },
                    section_separators = { left = '', right = '' },
                },
                sections = {
                    lualine_a = {
                        { 'mode', fmt = function(str) return str:sub(1, 1) end } }
                }
            })
        end
    },
    { 'olimorris/onedarkpro.nvim',        config = function() vim.cmd("colorscheme onedark") end },

    -- LSP
    { 'VonHeikemen/lsp-zero.nvim',        branch = 'v3.x' },
    { 'williamboman/mason.nvim',          config = function() require('mason').setup() end },
    { 'williamboman/mason-lspconfig.nvim' },

    -- LSP Support
    {
        'neovim/nvim-lspconfig',
        dependencies = {
            { 'hrsh7th/cmp-nvim-lsp' },
        },
    },

    -- Autocompletion
    {
        'hrsh7th/nvim-cmp',
        dependencies = {
            { 'L3MON4D3/LuaSnip' },
        }
    },
    { 'L3MON4D3/LuaSnip',                   config = function() require('luasnip.loaders.from_snipmate').lazy_load() end },

    -- Git?
    { 'tpope/vim-fugitive' },
    { 'sindrets/diffview.nvim' },

    -- Some nice additions
    { 'nvim-treesitter/playground' },
    { 'norcalli/nvim-colorizer.lua',        config = function() require('colorizer').setup() end },
    { 'andweeb/presence.nvim' },
    { 'alvarosevilla95/luatab.nvim',        config = function() require('luatab').setup() end },
    { 'ray-x/lsp_signature.nvim',           config = function() require('lsp_signature').setup() end },
    { 'folke/todo-comments.nvim' },
    { 'lukas-reineke/indent-blankline.nvim' },
    {
        'mhartington/formatter.nvim',
        config = function()
            local util = require("formatter.util")

            local function prettier()
                return {
                    exe = 'prettier',
                    args = {
                        '--single-quote',
                        '--use-tabs',
                        '--tab-width', '4',
                        '--trailing-comma', 'es5',
                        '--bracket-same-line',
                        '--insert-pragma',
                        '--stdin-filepath',
                        vim.fn.shellescape(vim.api.nvim_buf_get_name(0))
                    },
                    stdin = true,
                }
            end

            require('formatter').setup({
                filetype = {
                    javascript = { prettier },
                    typescript = { prettier },
                    markdown = { prettier },
                    css = { prettier },
                    json = { prettier },
                    html = { prettier },
                    scss = { prettier },

                    lua = {
                        function()
                            return {
                                exe = 'stylua',
                                args = {
                                    '--indent-type',
                                    'Spaces',
                                    '--line-endings',
                                    'Unix',
                                    '--quote-style',
                                    'AutoPreferSingle',
                                    '--indent-width',
                                    vim.bo.tabstop,
                                    '--column-width',
                                    vim.bo.textwidth,
                                    '-',
                                },
                                stdin = true,
                            }
                        end
                    }
                }
            })
        end
    },
    {
	    "utilyre/barbecue.nvim",
	    name = "barbecue",
	    version = "*",
	    dependencies = {
		    "SmiteshP/nvim-navic",
		    "nvim-tree/nvim-web-devicons", -- optional dependency
	    },
	    opts = {
		    -- configurations go here
	    },
    },
    {'Saecki/crates.nvim',
	dependencies = {'nvim-lua/plenary.nvim'},
	tag = 'stable',
	config = function ()
		require('crates').setup()
	end
    },
    {'simrat39/inlay-hints.nvim',
	config=function()
		require("inlay-hints").setup()
	end
    },
    {'echasnovski/mini.comment',
	config=function()
		require('mini.comment').setup({
			options = {
				ignore_blank_line = true
			}
		})
	end
    },

    -- File explorer
    {'stevearc/oil.nvim',
        dependencies = {'nvim-tree/nvim-web-devicons'},
	config = function()
		require('oil').setup({
			columns = {
				'icon',
				'size'
			}
		})
	end
    },

    -- Cursor specific additions
    {
        'yamatsum/nvim-cursorline',
        config = function()
            require('nvim-cursorline').setup({
                cursorline = { enable = true, timeout = 100, number = false }, cursorword = { enable = true } })
        end
    },
})

require("BluePlum.set")
require("BluePlum.remap")
